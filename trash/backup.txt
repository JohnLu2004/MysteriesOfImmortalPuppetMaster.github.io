"index.html":

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Puppet Master</title>
    <link rel="icon" type="image/png" href="ppt1.png">
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Merriweather:wght@300&display=swap" rel="stylesheet">
</head>
<body>

    <div id="theme-toggle">
        <button id="toggle-theme-btn">üåô Dark Mode</button>
    </div>

    <div id="chapter-nav">
        <button id="prev-btn">‚Üê Previous</button>
        <select id="chapter-select"></select>
        <button id="next-btn">Next ‚Üí</button>
    </div>

    <div id="chapter-content">
        <!-- Chapter content will be loaded here -->
    </div>

    <script src="script.js"></script>
</body>
</html>



"script.js":

/* script.js */

document.addEventListener('DOMContentLoaded', function() {

    let chapters = [];
    let currentChapterIndex = 0;
    const totalChapters = 20; // Adjust this number as needed

    // Function to load all chapters
    function loadChapters() {
        let chapterPromises = [];
        for(let i = 1; i <= totalChapters; i++) {
            let chapterFile = chapters/chapter${i}.txt;
            chapterPromises.push(fetch(chapterFile)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(File not found: ${chapterFile});
                    }
                    return response.text();
                })
                .catch(error => {
                    console.error(error);
                    return null;
                })
            );
        }

        Promise.all(chapterPromises).then(chapterTexts => {
            chapters = chapterTexts.filter(text => text !== null);
            if(chapters.length > 0) {
                populateChapterSelect();
                displayChapter(currentChapterIndex);
            } else {
                document.getElementById('chapter-content').textContent = 'No chapters found.';
            }
        }).catch(error => {
            console.error('Error loading chapters:', error);
        });
    }

    // Function to populate the chapter select dropdown
    function populateChapterSelect() {
        let select = document.getElementById('chapter-select');
        select.innerHTML = ''; // Clear existing options
        chapters.forEach((chapter, index) => {
            let firstLine = chapter.split('\n')[0].trim();
            let option = document.createElement('option');
            option.value = index;
            option.textContent = firstLine; // Remove the "Chapter ${index + 1}:"
            select.appendChild(option);
        });

        select.addEventListener('change', function () {
            currentChapterIndex = parseInt(this.value);
            displayChapter(currentChapterIndex);
        });
    }

    // Function to display the chapter content
    function displayChapter(index) {
        let chapterText = chapters[index];
        let lines = chapterText.split('\n');
        let headline = lines.shift().trim();
        let content = lines.join('\n');

        let chapterContentDiv = document.getElementById('chapter-content');
        chapterContentDiv.innerHTML = '';

        let h1 = document.createElement('h1');
        h1.textContent = headline;
        chapterContentDiv.appendChild(h1);

        let p = document.createElement('p');
        p.textContent = content;
        chapterContentDiv.appendChild(p);

        document.getElementById('chapter-select').value = index;
    }

    // Event listeners for next and previous buttons
    document.getElementById('next-btn').addEventListener('click', function() {
        if(currentChapterIndex < chapters.length - 1) {
            currentChapterIndex++;
            displayChapter(currentChapterIndex);
        }
    });

    document.getElementById('prev-btn').addEventListener('click', function() {
        if(currentChapterIndex > 0) {
            currentChapterIndex--;
            displayChapter(currentChapterIndex);
        }
    });

    // Dark mode toggle
    const toggleThemeBtn = document.getElementById('toggle-theme-btn');
    toggleThemeBtn.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        toggleThemeBtn.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
    });

    // Start loading chapters
    loadChapters();

});

"style.css":


/* Import fonts from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Merriweather:wght@300&display=swap');

/* General styling */
body {
    font-family: 'Open Sans', sans-serif;
    background-color: #f5f5f5;
    color: #333;
    text-align: center;
    padding: 20px;
    margin: 0;
    transition: background-color 0.3s ease, color 0.3s ease;
}

/* Dark mode styling */
body.dark-mode {
    background-color: #1e1e1e;
    color: #ddd;
}

#chapter-nav {
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    gap: 20px;
}

#chapter-nav button, #toggle-theme-btn {
    padding: 10px 15px;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    background-color: #008cba;
    color: #fff;
    transition: background-color 0.3s;
}

#chapter-nav button:hover, #toggle-theme-btn:hover {
    background-color: #005f7f;
}

#chapter-select {
    padding: 10px;
    font-size: 16px;
    border: 2px solid #008cba;
    border-radius: 5px;
    outline: none;
    cursor: pointer;
}

/* Chapter content styling */
#chapter-content {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    text-align: left;
}

#chapter-content h1 {
    font-family: 'Merriweather', serif;
    font-size: 32px;
    font-weight: 300;
    margin-bottom: 20px;
    text-align: center;
}

#chapter-content p {
    line-height: 1.6;
    font-size: 18px;
    max-width: 600px;
    margin: 0 auto;
    white-space: pre-wrap;
    text-align: justify;
}

/* Dark mode switch button */
#theme-toggle {
    text-align: right;
    margin-bottom: 20px;
}

/* Dark mode specific styles */
body.dark-mode #toggle-theme-btn {
    background-color: #444;
    color: #fff;
}

body.dark-mode #chapter-nav button, body.dark-mode #chapter-select {
    background-color: #444;
    color: #fff;
}

body.dark-mode #chapter-nav button:hover, body.dark-mode #toggle-theme-btn:hover {
    background-color: #666;
}